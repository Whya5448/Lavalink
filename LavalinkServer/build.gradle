import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "application"
    id "com.gorylenko.gradle-git-properties"
//    id "org.sonarqube"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.allopen"
    id "com.adarshr.test-logger"
    id "io.spring.dependency-management"
    id "org.springframework.boot"
    id "org.ajoberstar.grgit"
}

description = 'Play audio to discord voice channels'
mainClassName = "lavalink.server.Launcher"
version = "${versionFromTag()}".toString()
ext {
    moduleName = 'Lavalink-Server'
}

bootJar {
    archiveName = "Lavalink.jar"
}

sourceCompatibility = targetCompatibility = "17"

bootRun {
    //compiling tests during bootRun increases the likelihood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

dependencies {
    implementation (group: 'moe.kyokobot.koe', name: 'core', version: koeVersion) {
        // This version of SLF4J does not recognise Logback 1.2.3
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation "moe.kyokobot.koe:ext-udpqueue:$koeVersion"
    implementation "com.github.walkyst:lavaplayer-fork:1.3.96"
    //implementation "com.sedmelluq:lavaplayer:$lavaplayerVersion"
    implementation(group: 'com.sedmelluq', name: 'lavaplayer-ext-youtube-rotator', version: lavaplayerIpRotatorVersion) {
        exclude group: 'com.sedmelluq', module: 'lavaplayer'
    }
    implementation "com.github.natanbc:lavadsp:$lavaDspVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    implementation "org.springframework:spring-websocket:$springWebSocketVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "io.sentry:sentry-logback:$sentryLogbackVersion"
    implementation "com.github.oshi:oshi-core:$oshiVersion"
    implementation "org.json:json:$jsonOrgVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion) {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow:$springBootVersion"
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion

    implementation "io.prometheus:simpleclient:$prometheusVersion"
    implementation "io.prometheus:simpleclient_hotspot:$prometheusVersion"
    implementation "io.prometheus:simpleclient_logback:$prometheusVersion"
    implementation "io.prometheus:simpleclient_servlet:$prometheusVersion"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
}

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.ext.moduleName,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'Unofficial'),
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

build {
    doLast {
        println 'Version: ' + version
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
String versionFromTag() {

    def headTag = grgit.tag.list().find {
        it.commit.getId() == grgit.head().getId()
    }

    // Uncommitted changes? -> should be SNAPSHOT
    // Also watch out for false positives in the CI build
    def clean = grgit.status().clean || System.getenv('CI') != null

    if (!clean) {
        println("Git state is dirty, setting version as snapshot")
    }

    if (headTag && clean) {
        headTag.getName()
    } else {
        "${grgit.head().id}-SNAPSHOT"
    }
}

//create a simple version file that we will be reading to create appropriate docker tags
void versionTxt() {
    new File("$projectDir/VERSION.txt").text = "$project.version\n"
}

versionTxt()
